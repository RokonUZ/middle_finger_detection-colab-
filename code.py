# -*- coding: utf-8 -*-
"""middle_finger_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1od1S6_0Rg99sHglbWo7csQa94jo02aTr
"""

from google.colab import files

uploaded = files.upload()

import cv2
from google.colab.patches import cv2_imshow
import math
import numpy as np

DESIRED_HEIGHT = 480
DESIRED_WIDTH = 480
def resize_and_show(image):
  h, w = image.shape[:2]
  if h < w:
    img = cv2.resize(image, (DESIRED_WIDTH, math.floor(h/(w/DESIRED_WIDTH))))
  else:
    img = cv2.resize(image, (math.floor(w/(h/DESIRED_HEIGHT)), DESIRED_HEIGHT))
  cv2_imshow(img)

# Read images with OpenCV.
images = {name: cv2.imread(name) for name in uploaded.keys()}
# Preview the images.
for name, image in images.items():
  print(name)   
  resize_and_show(image)

!pip install mediapipe

import mediapipe as mp
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

# Run MediaPipe Hands.
with mp_hands.Hands(
    static_image_mode=True,
    max_num_hands=2,
    min_detection_confidence=0.7) as hands:
  for name, image in images.items():
    # Convert the BGR image to RGB, flip the image around y-axis for correct 
    # handedness output and process it with MediaPipe Hands.
    results = hands.process(cv2.flip(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), 1))

    # Print handedness (left v.s. right hand).
    print(f'Handedness of {name}:')
    print(results.multi_handedness)

    if not results.multi_hand_landmarks:
      continue
    # Draw hand landmarks of each hand.
    print(f'Hand landmarks of {name}:')
    image_hight, image_width, _ = image.shape
    annotated_image = cv2.flip(image.copy(), 1)
    for hand_landmarks in results.multi_hand_landmarks:
      # Print index finger tip coordinates.
      print(
          f'Index finger tip coordinate: (',
          f'{hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x * image_width}, '
          f'{hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y * image_hight})'
      )
      mp_drawing.draw_landmarks(
          annotated_image,
          hand_landmarks,
          mp_hands.HAND_CONNECTIONS,
          mp_drawing_styles.get_default_hand_landmarks_style(),
          mp_drawing_styles.get_default_hand_connections_style())
    resize_and_show(cv2.flip(annotated_image, 1))

import cv2
import numpy as np

ylower = np.array([22, 93, 0])
yupper = np.array([45, 255, 255])

#gray=cv2.cvtColor(annotated_image,cv2.COLOR_BGR2GRAY)
#cv2_imshow(gray)

#bgr=cv2.cvtColor(annotated_image,cv2.COLOR_RGB2BGR)
#cv2_imshow(bgr)

#cv2_imshow(annotated_image)

hsv=cv2.cvtColor(annotated_image,cv2.COLOR_BGR2HSV)
#cv2_imshow(hsv)

musk=cv2.inRange(hsv,ylower,yupper)
#cv2_imshow(musk)

contours, hierarchy=cv2.findContours(musk,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

flip=cv2.flip(image,1)
fig=cv2.drawContours(flip,contours,-1,(0,255,0))
cv2_imshow(fig)
